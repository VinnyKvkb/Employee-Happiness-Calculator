{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport * as i2 from '@ngx-formly/core';\nimport { FormlyModule } from '@ngx-formly/core';\nimport * as i3 from '@ngx-formly/core/select';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { FieldType, FormlyBootstrapFormFieldModule } from '@ngx-formly/bootstrap/form-field';\n\nconst _c0 = function (a0, a1) {\n  return {\n    \"form-check-inline\": a0,\n    \"form-switch\": a1\n  };\n};\n\nfunction FormlyFieldMultiCheckbox_ng_template_0_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"input\", 3);\n    i0.ɵɵlistener(\"change\", function FormlyFieldMultiCheckbox_ng_template_0_div_0_Template_input_change_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const option_r3 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return ctx_r5.onChange(option_r3.value, $event.target.checked);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"label\", 4);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    const i_r4 = ctx.index;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(8, _c0, ctx_r2.props.formCheck === \"inline\" || ctx_r2.props.formCheck === \"inline-switch\", ctx_r2.props.formCheck === \"switch\" || ctx_r2.props.formCheck === \"inline-switch\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", ctx_r2.id + \"_\" + i_r4)(\"value\", option_r3.value)(\"checked\", ctx_r2.isChecked(option_r3))(\"formlyAttributes\", ctx_r2.field)(\"disabled\", ctx_r2.formControl.disabled || option_r3.disabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", ctx_r2.id + \"_\" + i_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r3.label, \" \");\n  }\n}\n\nfunction FormlyFieldMultiCheckbox_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, FormlyFieldMultiCheckbox_ng_template_0_div_0_Template, 4, 11, \"div\", 1);\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵpipe(2, \"formlySelectOptions\");\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(1, 1, i0.ɵɵpipeBind2(2, 3, ctx_r1.props.options, ctx_r1.field)));\n  }\n}\n\nlet FormlyFieldMultiCheckbox = /*#__PURE__*/(() => {\n  class FormlyFieldMultiCheckbox extends FieldType {\n    constructor() {\n      super(...arguments);\n      this.defaultOptions = {\n        props: {\n          formCheck: 'default' // 'default' | 'inline' | 'switch' | 'inline-switch'\n\n        }\n      };\n    }\n\n    onChange(value, checked) {\n      this.formControl.markAsDirty();\n\n      if (this.props.type === 'array') {\n        this.formControl.patchValue(checked ? [...(this.formControl.value || []), value] : [...(this.formControl.value || [])].filter(o => o !== value));\n      } else {\n        this.formControl.patchValue(Object.assign(Object.assign({}, this.formControl.value), {\n          [value]: checked\n        }));\n      }\n\n      this.formControl.markAsTouched();\n    }\n\n    isChecked(option) {\n      const value = this.formControl.value;\n      return value && (this.props.type === 'array' ? value.indexOf(option.value) !== -1 : value[option.value]);\n    }\n\n  }\n\n  FormlyFieldMultiCheckbox.ɵfac = /* @__PURE__ */function () {\n    let ɵFormlyFieldMultiCheckbox_BaseFactory;\n    return function FormlyFieldMultiCheckbox_Factory(t) {\n      return (ɵFormlyFieldMultiCheckbox_BaseFactory || (ɵFormlyFieldMultiCheckbox_BaseFactory = i0.ɵɵgetInheritedFactory(FormlyFieldMultiCheckbox)))(t || FormlyFieldMultiCheckbox);\n    };\n  }();\n\n  FormlyFieldMultiCheckbox.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: FormlyFieldMultiCheckbox,\n    selectors: [[\"formly-field-multicheckbox\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[\"fieldTypeTemplate\", \"\"], [\"class\", \"form-check\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"form-check\", 3, \"ngClass\"], [\"type\", \"checkbox\", 1, \"form-check-input\", 3, \"id\", \"value\", \"checked\", \"formlyAttributes\", \"disabled\", \"change\"], [1, \"form-check-label\", 3, \"for\"]],\n    template: function FormlyFieldMultiCheckbox_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, FormlyFieldMultiCheckbox_ng_template_0_Template, 3, 6, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n      }\n    },\n    directives: [i1.NgForOf, i1.NgClass, i2.ɵFormlyAttributes],\n    pipes: [i1.AsyncPipe, i3.FormlySelectOptionsPipe],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return FormlyFieldMultiCheckbox;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet FormlyBootstrapMultiCheckboxModule = /*#__PURE__*/(() => {\n  class FormlyBootstrapMultiCheckboxModule {}\n\n  FormlyBootstrapMultiCheckboxModule.ɵfac = function FormlyBootstrapMultiCheckboxModule_Factory(t) {\n    return new (t || FormlyBootstrapMultiCheckboxModule)();\n  };\n\n  FormlyBootstrapMultiCheckboxModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: FormlyBootstrapMultiCheckboxModule\n  });\n  FormlyBootstrapMultiCheckboxModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, ReactiveFormsModule, FormlyBootstrapFormFieldModule, FormlySelectModule, FormlyModule.forChild({\n      types: [{\n        name: 'multicheckbox',\n        component: FormlyFieldMultiCheckbox,\n        wrappers: ['form-field']\n      }]\n    })]]\n  });\n  return FormlyBootstrapMultiCheckboxModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FormlyBootstrapMultiCheckboxModule, FormlyFieldMultiCheckbox }; //# sourceMappingURL=ngx-formly-bootstrap-multicheckbox.mjs.map","map":null,"metadata":{},"sourceType":"module"}