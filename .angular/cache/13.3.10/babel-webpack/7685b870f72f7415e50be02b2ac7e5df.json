{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from '@ngx-formly/core';\nimport { FormlyModule } from '@ngx-formly/core';\nimport * as i2 from '@angular/forms';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\nimport * as i4 from '@ngx-formly/core/select';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { FieldType, FormlyBootstrapFormFieldModule } from '@ngx-formly/bootstrap/form-field';\n\nfunction FormlyFieldRadio_ng_template_0_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵelement(1, \"input\", 3);\n    i0.ɵɵelementStart(2, \"label\", 4);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    const i_r4 = ctx.index;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"form-check-inline\", ctx_r2.props.formCheck === \"inline\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"is-invalid\", ctx_r2.showError);\n    i0.ɵɵproperty(\"id\", ctx_r2.id + \"_\" + i_r4)(\"name\", ctx_r2.field.name || ctx_r2.id)(\"value\", option_r3.value)(\"formControl\", option_r3.disabled ? ctx_r2.disabledControl : ctx_r2.formControl)(\"formlyAttributes\", ctx_r2.field);\n    i0.ɵɵattribute(\"value\", option_r3.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", ctx_r2.id + \"_\" + i_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r3.label, \" \");\n  }\n}\n\nfunction FormlyFieldRadio_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, FormlyFieldRadio_ng_template_0_div_0_Template, 4, 12, \"div\", 1);\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵpipe(2, \"formlySelectOptions\");\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(1, 1, i0.ɵɵpipeBind2(2, 3, ctx_r1.props.options, ctx_r1.field)));\n  }\n}\n\nlet FormlyFieldRadio = /*#__PURE__*/(() => {\n  class FormlyFieldRadio extends FieldType {\n    constructor() {\n      super(...arguments);\n      this.defaultOptions = {\n        props: {\n          formCheck: 'default'\n        }\n      };\n    }\n\n    get disabledControl() {\n      return new FormControl({\n        value: this.formControl.value,\n        disabled: true\n      });\n    }\n\n  }\n\n  FormlyFieldRadio.ɵfac = /* @__PURE__ */function () {\n    let ɵFormlyFieldRadio_BaseFactory;\n    return function FormlyFieldRadio_Factory(t) {\n      return (ɵFormlyFieldRadio_BaseFactory || (ɵFormlyFieldRadio_BaseFactory = i0.ɵɵgetInheritedFactory(FormlyFieldRadio)))(t || FormlyFieldRadio);\n    };\n  }();\n\n  FormlyFieldRadio.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: FormlyFieldRadio,\n    selectors: [[\"formly-field-radio\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[\"fieldTypeTemplate\", \"\"], [\"class\", \"form-check\", 3, \"form-check-inline\", 4, \"ngFor\", \"ngForOf\"], [1, \"form-check\"], [\"type\", \"radio\", 1, \"form-check-input\", 3, \"id\", \"name\", \"value\", \"formControl\", \"formlyAttributes\"], [1, \"form-check-label\", 3, \"for\"]],\n    template: function FormlyFieldRadio_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, FormlyFieldRadio_ng_template_0_Template, 3, 6, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n      }\n    },\n    directives: [i1.NgForOf, i2.RadioControlValueAccessor, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlDirective, i3.ɵFormlyAttributes],\n    pipes: [i1.AsyncPipe, i4.FormlySelectOptionsPipe],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return FormlyFieldRadio;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet FormlyBootstrapRadioModule = /*#__PURE__*/(() => {\n  class FormlyBootstrapRadioModule {}\n\n  FormlyBootstrapRadioModule.ɵfac = function FormlyBootstrapRadioModule_Factory(t) {\n    return new (t || FormlyBootstrapRadioModule)();\n  };\n\n  FormlyBootstrapRadioModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: FormlyBootstrapRadioModule\n  });\n  FormlyBootstrapRadioModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, ReactiveFormsModule, FormlyBootstrapFormFieldModule, FormlySelectModule, FormlyModule.forChild({\n      types: [{\n        name: 'radio',\n        component: FormlyFieldRadio,\n        wrappers: ['form-field']\n      }]\n    })]]\n  });\n  return FormlyBootstrapRadioModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FormlyBootstrapRadioModule, FormlyFieldRadio }; //# sourceMappingURL=ngx-formly-bootstrap-radio.mjs.map","map":null,"metadata":{},"sourceType":"module"}