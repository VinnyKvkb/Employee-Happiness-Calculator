{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Pipe, NgModule } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { map, filter, tap } from 'rxjs/operators';\nlet FormlySelectOptionsPipe = /*#__PURE__*/(() => {\n  class FormlySelectOptionsPipe {\n    transform(options, field) {\n      if (!(options instanceof Observable)) {\n        options = this.observableOf(options, field);\n      } else {\n        this.dispose();\n      }\n\n      return options.pipe(map(value => this.transformOptions(value, field)));\n    }\n\n    ngOnDestroy() {\n      this.dispose();\n    }\n\n    transformOptions(options, field) {\n      const to = this.transformSelectProps(field);\n      const opts = [];\n      const groups = {};\n      options === null || options === void 0 ? void 0 : options.forEach(option => {\n        const o = this.transformOption(option, to);\n\n        if (o.group) {\n          const id = groups[o.label];\n\n          if (id === undefined) {\n            groups[o.label] = opts.push(o) - 1;\n          } else {\n            o.group.forEach(o => opts[id].group.push(o));\n          }\n        } else {\n          opts.push(o);\n        }\n      });\n      return opts;\n    }\n\n    transformOption(option, props) {\n      const group = props.groupProp(option);\n\n      if (Array.isArray(group)) {\n        return {\n          label: props.labelProp(option),\n          group: group.map(opt => this.transformOption(opt, props))\n        };\n      }\n\n      option = {\n        label: props.labelProp(option),\n        value: props.valueProp(option),\n        disabled: !!props.disabledProp(option)\n      };\n\n      if (group) {\n        return {\n          label: group,\n          group: [option]\n        };\n      }\n\n      return option;\n    }\n\n    transformSelectProps(field) {\n      const props = (field === null || field === void 0 ? void 0 : field.props) || (field === null || field === void 0 ? void 0 : field.templateOptions) || {};\n\n      const selectPropFn = prop => typeof prop === 'function' ? prop : o => o[prop];\n\n      return {\n        groupProp: selectPropFn(props.groupProp || 'group'),\n        labelProp: selectPropFn(props.labelProp || 'label'),\n        valueProp: selectPropFn(props.valueProp || 'value'),\n        disabledProp: selectPropFn(props.disabledProp || 'disabled')\n      };\n    }\n\n    dispose() {\n      if (this._options) {\n        this._options.complete();\n\n        this._options = null;\n      }\n\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n\n        this._subscription = null;\n      }\n    }\n\n    observableOf(options, f) {\n      this.dispose();\n\n      if (f && f.options && f.options.fieldChanges) {\n        this._subscription = f.options.fieldChanges.pipe(filter(({\n          property,\n          type,\n          field\n        }) => {\n          return type === 'expressionChanges' && (property.indexOf('templateOptions.options') === 0 || property.indexOf('props.options') === 0) && field === f && Array.isArray(field.props.options) && !!this._options;\n        }), tap(() => this._options.next(f.props.options))).subscribe();\n      }\n\n      this._options = new BehaviorSubject(options);\n      return this._options.asObservable();\n    }\n\n  }\n\n  FormlySelectOptionsPipe.ɵfac = function FormlySelectOptionsPipe_Factory(t) {\n    return new (t || FormlySelectOptionsPipe)();\n  };\n\n  FormlySelectOptionsPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"formlySelectOptions\",\n    type: FormlySelectOptionsPipe,\n    pure: true\n  });\n  return FormlySelectOptionsPipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet FormlySelectModule = /*#__PURE__*/(() => {\n  class FormlySelectModule {}\n\n  FormlySelectModule.ɵfac = function FormlySelectModule_Factory(t) {\n    return new (t || FormlySelectModule)();\n  };\n\n  FormlySelectModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: FormlySelectModule\n  });\n  FormlySelectModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return FormlySelectModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FormlySelectModule, FormlySelectOptionsPipe }; //# sourceMappingURL=ngx-formly-core-select.mjs.map","map":null,"metadata":{},"sourceType":"module"}