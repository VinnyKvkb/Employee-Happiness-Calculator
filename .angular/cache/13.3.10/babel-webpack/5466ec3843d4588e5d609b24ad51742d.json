{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, NgModule, Directive, Optional, ViewChild } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@ngx-formly/core';\nimport { FieldWrapper, FormlyModule, FieldType as FieldType$1 } from '@ngx-formly/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nfunction FormlyWrapperFormField_ng_template_0_label_0_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtext(1, \"*\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction FormlyWrapperFormField_ng_template_0_label_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, FormlyWrapperFormField_ng_template_0_label_0_span_2_Template, 2, 0, \"span\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"for\", ctx_r8.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r8.props.label, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.props.required && ctx_r8.props.hideRequiredMarker !== true);\n  }\n}\n\nfunction FormlyWrapperFormField_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, FormlyWrapperFormField_ng_template_0_label_0_Template, 3, 3, \"label\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.props.label && ctx_r1.props.hideLabel !== true);\n  }\n}\n\nfunction FormlyWrapperFormField_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementContainer(1, 10);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n\n    const _r0 = i0.ɵɵreference(1);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r0);\n  }\n}\n\nfunction FormlyWrapperFormField_ng_template_4_Template(rf, ctx) {}\n\nfunction FormlyWrapperFormField_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementContainer(1, 10);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n\n    const _r0 = i0.ɵɵreference(1);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r0);\n  }\n}\n\nfunction FormlyWrapperFormField_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵelement(1, \"formly-validation-message\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"display\", \"block\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"field\", ctx_r6.field);\n  }\n}\n\nfunction FormlyWrapperFormField_small_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r7.props.description);\n  }\n}\n\nconst _c0 = [\"fieldTypeTemplate\"];\nlet FormlyWrapperFormField = /*#__PURE__*/(() => {\n  class FormlyWrapperFormField extends FieldWrapper {}\n\n  FormlyWrapperFormField.ɵfac = /* @__PURE__ */function () {\n    let ɵFormlyWrapperFormField_BaseFactory;\n    return function FormlyWrapperFormField_Factory(t) {\n      return (ɵFormlyWrapperFormField_BaseFactory || (ɵFormlyWrapperFormField_BaseFactory = i0.ɵɵgetInheritedFactory(FormlyWrapperFormField)))(t || FormlyWrapperFormField);\n    };\n  }();\n\n  FormlyWrapperFormField.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: FormlyWrapperFormField,\n    selectors: [[\"formly-wrapper-form-field\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 9,\n    vars: 8,\n    consts: [[\"labelTemplate\", \"\"], [1, \"mb-3\"], [4, \"ngIf\"], [\"fieldComponent\", \"\"], [\"class\", \"invalid-feedback\", 3, \"display\", 4, \"ngIf\"], [\"class\", \"form-text text-muted\", 4, \"ngIf\"], [\"class\", \"form-label\", 4, \"ngIf\"], [1, \"form-label\"], [\"aria-hidden\", \"true\", 4, \"ngIf\"], [\"aria-hidden\", \"true\"], [3, \"ngTemplateOutlet\"], [1, \"invalid-feedback\"], [3, \"field\"], [1, \"form-text\", \"text-muted\"]],\n    template: function FormlyWrapperFormField_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, FormlyWrapperFormField_ng_template_0_Template, 1, 1, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵtemplate(3, FormlyWrapperFormField_ng_container_3_Template, 2, 1, \"ng-container\", 2);\n        i0.ɵɵtemplate(4, FormlyWrapperFormField_ng_template_4_Template, 0, 0, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(6, FormlyWrapperFormField_ng_container_6_Template, 2, 1, \"ng-container\", 2);\n        i0.ɵɵtemplate(7, FormlyWrapperFormField_div_7_Template, 2, 3, \"div\", 4);\n        i0.ɵɵtemplate(8, FormlyWrapperFormField_small_8_Template, 2, 1, \"small\", 5);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵclassProp(\"form-floating\", ctx.props.labelPosition === \"floating\")(\"has-error\", ctx.showError);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.props.labelPosition !== \"floating\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.props.labelPosition === \"floating\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showError);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.props.description);\n      }\n    },\n    directives: [i1.ɵFormlyValidationMessage, i2.NgIf, i2.NgTemplateOutlet],\n    encapsulation: 2\n  });\n  return FormlyWrapperFormField;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet FormlyBootstrapFormFieldModule = /*#__PURE__*/(() => {\n  class FormlyBootstrapFormFieldModule {}\n\n  FormlyBootstrapFormFieldModule.ɵfac = function FormlyBootstrapFormFieldModule_Factory(t) {\n    return new (t || FormlyBootstrapFormFieldModule)();\n  };\n\n  FormlyBootstrapFormFieldModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: FormlyBootstrapFormFieldModule\n  });\n  FormlyBootstrapFormFieldModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, ReactiveFormsModule, FormlyModule.forChild({\n      wrappers: [{\n        name: 'form-field',\n        component: FormlyWrapperFormField\n      }]\n    })]]\n  });\n  return FormlyBootstrapFormFieldModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet FieldType = /*#__PURE__*/(() => {\n  class FieldType extends FieldType$1 {\n    constructor(hostContainerRef) {\n      super();\n      this.hostContainerRef = hostContainerRef;\n    }\n\n    set content(templateRef) {\n      if (templateRef && this.hostContainerRef) {\n        this.hostContainerRef.createEmbeddedView(templateRef);\n      }\n    }\n\n  }\n\n  FieldType.ɵfac = function FieldType_Factory(t) {\n    return new (t || FieldType)(i0.ɵɵdirectiveInject(i0.ViewContainerRef, 8));\n  };\n\n  FieldType.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: FieldType,\n    viewQuery: function FieldType_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.content = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return FieldType;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FieldType, FormlyBootstrapFormFieldModule }; //# sourceMappingURL=ngx-formly-bootstrap-form-field.mjs.map","map":null,"metadata":{},"sourceType":"module"}